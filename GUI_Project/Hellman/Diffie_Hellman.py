from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton,
    QLabel, QTextEdit
)
import math
import random

class DiffieHellmanDemo(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Diffie-Hellman –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞")
        self.resize(520, 500)

        layout = QVBoxLayout()

        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        layout.addWidget(QLabel("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:"))
        self.input_text = QTextEdit()
        self.input_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        layout.addWidget(self.input_text)

        # –ö–Ω–æ–ø–∫–∏
        self.btn_encrypt = QPushButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        self.btn_decrypt = QPushButton("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        layout.addWidget(self.btn_encrypt)
        layout.addWidget(self.btn_decrypt)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        layout.addWidget(QLabel("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"))
        self.encrypted_text = QTextEdit()
        self.encrypted_text.setReadOnly(True)
        layout.addWidget(self.encrypted_text)

        layout.addWidget(QLabel("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"))
        self.decrypted_text = QTextEdit()
        self.decrypted_text.setReadOnly(True)
        layout.addWidget(self.decrypted_text)

        self.setLayout(layout)

        # –°–∏–≥–Ω–∞–ª—ã
        self.btn_encrypt.clicked.connect(self.encrypt_text)
        self.btn_decrypt.clicked.connect(self.decrypt_text)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DH
        self.shift = None
        self.encrypted = ""

    def generate_shared_key(self):
        # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (~20 —Ä–∞–∑—Ä—è–¥–æ–≤)
        p = 32416190071  # –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
        g = 5
        a = random.randint(10**9, 10**10)
        b = random.randint(10**9, 10**10)

        A = pow(g, a, p)
        B = pow(g, b, p)

        K_A = pow(B, a, p)
        K_B = pow(A, b, p)
        K = K_A  # –æ–±—â–∏–π –∫–ª—é—á

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–Ω–≥–µ–Ω—Å –¥–ª—è —Å–¥–≤–∏–≥–∞
        key_value = abs(math.tan(K)) % 1
        shift = int(key_value * 255)
        return shift

    def encrypt_text(self):
        text = self.input_text.toPlainText()
        if not text:
            self.encrypted_text.setPlainText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
            return

        self.shift = self.generate_shared_key()
        encrypted = ''.join(chr((ord(c) + self.shift) % 256) for c in text)
        self.encrypted = encrypted
        self.encrypted_text.setPlainText(encrypted)
        self.decrypted_text.clear()

    def decrypt_text(self):
        if not self.encrypted:
            self.decrypted_text.setPlainText("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.")
            return
        if self.shift is None:
            self.decrypted_text.setPlainText("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        decrypted = ''.join(chr((ord(c) - self.shift) % 256) for c in self.encrypted)
        self.decrypted_text.setPlainText(decrypted)

if __name__ == "__main__":
    app = QApplication([])
    window = DiffieHellmanDemo()
    window.show()
    app.exec()